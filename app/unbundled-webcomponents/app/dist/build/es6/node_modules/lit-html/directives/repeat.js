/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
import{createMarker,directive,NodePart,removeNodes,reparentNodes}from"../lit-html.js";const createAndInsertPart=(containerPart,beforePart)=>{const container=containerPart.startNode.parentNode,beforeNode=void 0===beforePart?containerPart.endNode:beforePart.startNode,startNode=container.insertBefore(createMarker(),beforeNode);container.insertBefore(createMarker(),beforeNode);const newPart=new NodePart(containerPart.options);return newPart.insertAfterNode(startNode),newPart},updatePart=(part,value)=>(part.setValue(value),part.commit(),part),insertPartBefore=(containerPart,part,ref)=>{const container=containerPart.startNode.parentNode,beforeNode=ref?ref.startNode:containerPart.endNode,endNode=part.endNode.nextSibling;endNode!==beforeNode&&reparentNodes(container,part.startNode,endNode,beforeNode)},removePart=part=>{removeNodes(part.startNode.parentNode,part.startNode,part.endNode.nextSibling)},generateMap=(list,start,end)=>{const map=new Map;for(let i=start;i<=end;i++)map.set(list[i],i);return map},partListCache=new WeakMap,keyListCache=new WeakMap;export const repeat=directive((items,keyFnOrTemplate,template)=>{let keyFn;return void 0===template?template=keyFnOrTemplate:void 0!==keyFnOrTemplate&&(keyFn=keyFnOrTemplate),containerPart=>{if(!(containerPart instanceof NodePart))throw new Error("repeat can only be used in text bindings");const oldParts=partListCache.get(containerPart)||[],oldKeys=keyListCache.get(containerPart)||[],newParts=[],newValues=[],newKeys=[];let newKeyToIndexMap,oldKeyToIndexMap,index=0;for(const item of items)newKeys[index]=keyFn?keyFn(item,index):index,newValues[index]=template(item,index),index++;let oldHead=0,oldTail=oldParts.length-1,newHead=0,newTail=newValues.length-1;for(;oldHead<=oldTail&&newHead<=newTail;)if(null===oldParts[oldHead])oldHead++;else if(null===oldParts[oldTail])oldTail--;else if(oldKeys[oldHead]===newKeys[newHead])newParts[newHead]=updatePart(oldParts[oldHead],newValues[newHead]),oldHead++,newHead++;else if(oldKeys[oldTail]===newKeys[newTail])newParts[newTail]=updatePart(oldParts[oldTail],newValues[newTail]),oldTail--,newTail--;else if(oldKeys[oldHead]===newKeys[newTail])newParts[newTail]=updatePart(oldParts[oldHead],newValues[newTail]),insertPartBefore(containerPart,oldParts[oldHead],newParts[newTail+1]),oldHead++,newTail--;else if(oldKeys[oldTail]===newKeys[newHead])newParts[newHead]=updatePart(oldParts[oldTail],newValues[newHead]),insertPartBefore(containerPart,oldParts[oldTail],oldParts[oldHead]),oldTail--,newHead++;else if(void 0===newKeyToIndexMap&&(newKeyToIndexMap=generateMap(newKeys,newHead,newTail),oldKeyToIndexMap=generateMap(oldKeys,oldHead,oldTail)),newKeyToIndexMap.has(oldKeys[oldHead]))if(newKeyToIndexMap.has(oldKeys[oldTail])){const oldIndex=oldKeyToIndexMap.get(newKeys[newHead]),oldPart=void 0!==oldIndex?oldParts[oldIndex]:null;if(null===oldPart){const newPart=createAndInsertPart(containerPart,oldParts[oldHead]);updatePart(newPart,newValues[newHead]),newParts[newHead]=newPart}else newParts[newHead]=updatePart(oldPart,newValues[newHead]),insertPartBefore(containerPart,oldPart,oldParts[oldHead]),oldParts[oldIndex]=null;newHead++}else removePart(oldParts[oldTail]),oldTail--;else removePart(oldParts[oldHead]),oldHead++;for(;newHead<=newTail;){const newPart=createAndInsertPart(containerPart,newParts[newTail+1]);updatePart(newPart,newValues[newHead]),newParts[newHead++]=newPart}for(;oldHead<=oldTail;){const oldPart=oldParts[oldHead++];null!==oldPart&&removePart(oldPart)}partListCache.set(containerPart,newParts),keyListCache.set(containerPart,newKeys)}});