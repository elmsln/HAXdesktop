import{createMarker}from"./template.js";const markerRegex=/{{(.*?)}}/;export class HTMLTemplate{constructor(element){this.parts=[],this.element=element;let index=-1,partIndex=0;const nodesToRemove=[],walker=document.createTreeWalker(element.content,NodeFilter.SHOW_ELEMENT|NodeFilter.SHOW_TEXT);for(;walker.nextNode();){index++;const node=walker.currentNode;if(1===node.nodeType){if(node.hasAttributes()){const attributes=Array.from(node.attributes);for(let i=0;i<attributes.length;i++){const attr=attributes[i],result=attr.value.split(markerRegex);console.log("result",result);const attributeStrings=result.filter((_,i)=>i%2==0);console.log("attributeStrings",attributeStrings),attributeStrings.length>0&&(this.parts.push({type:"attribute",index,name,strings:attributeStrings}),node.removeAttribute(attr.name),partIndex+=attributeStrings.length-1)}}}else if(3===node.nodeType){const data=node.data,parent=node.parentNode,strings=data.split(markerRegex).filter((_,i)=>i%2==0);if(strings.length>0){const lastIndex=strings.length-1;for(let i=0;i<lastIndex;i++)parent.insertBefore(""===strings[i]?createMarker():document.createTextNode(strings[i]),node),this.parts.push({type:"node",index:++index});""===strings[lastIndex]?(parent.insertBefore(createMarker(),node),nodesToRemove.push(node)):node.data=strings[lastIndex],partIndex+=lastIndex}}}}}