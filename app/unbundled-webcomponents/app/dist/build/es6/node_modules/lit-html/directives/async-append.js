/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
var __asyncValues=this&&this.__asyncValues||function(o){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i,m=o[Symbol.asyncIterator];return m?m.call(o):(o="function"==typeof __values?__values(o):o[Symbol.iterator](),i={},verb("next"),verb("throw"),verb("return"),i[Symbol.asyncIterator]=function(){return this},i);function verb(n){i[n]=o[n]&&function(v){return new Promise((function(resolve,reject){(function settle(resolve,reject,d,v){Promise.resolve(v).then((function(v){resolve({value:v,done:d})}),reject)})(resolve,reject,(v=o[n](v)).done,v.value)}))}}};import{createMarker,directive,NodePart}from"../lit-html.js";export const asyncAppend=directive((value,mapper)=>async part=>{var e_1,_a;if(!(part instanceof NodePart))throw new Error("asyncAppend can only be used in text bindings");if(value===part.value)return;let itemPart;part.value=value;let i=0;try{for(var value_1_1,value_1=__asyncValues(value);!(value_1_1=await value_1.next()).done;){let v=value_1_1.value;if(part.value!==value)break;0===i&&part.clear(),void 0!==mapper&&(v=mapper(v,i));let itemStartNode=part.startNode;void 0!==itemPart&&(itemStartNode=createMarker(),itemPart.endNode=itemStartNode,part.endNode.parentNode.insertBefore(itemStartNode,part.endNode)),itemPart=new NodePart(part.options),itemPart.insertAfterNode(itemStartNode),itemPart.setValue(v),itemPart.commit(),i++}}catch(e_1_1){e_1={error:e_1_1}}finally{try{value_1_1&&!value_1_1.done&&(_a=value_1.return)&&await _a.call(value_1)}finally{if(e_1)throw e_1.error}}});