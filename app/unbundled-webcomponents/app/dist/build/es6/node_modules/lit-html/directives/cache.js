/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
import{TemplateInstance}from"../lib/template-instance.js";import{directive,NodePart,reparentNodes,TemplateResult}from"../lit-html.js";const templateCaches=new WeakMap;export const cache=directive(value=>part=>{if(!(part instanceof NodePart))throw new Error("cache can only be used in text bindings");let templateCache=templateCaches.get(part);void 0===templateCache&&(templateCache=new WeakMap,templateCaches.set(part,templateCache));const previousValue=part.value;if(previousValue instanceof TemplateInstance){if(value instanceof TemplateResult&&previousValue.template===part.options.templateFactory(value))return void part.setValue(value);{let cachedTemplate=templateCache.get(previousValue.template);void 0===cachedTemplate&&(cachedTemplate={instance:previousValue,nodes:document.createDocumentFragment()},templateCache.set(previousValue.template,cachedTemplate)),reparentNodes(cachedTemplate.nodes,part.startNode.nextSibling,part.endNode)}}if(value instanceof TemplateResult){const template=part.options.templateFactory(value),cachedTemplate=templateCache.get(template);void 0!==cachedTemplate&&(part.setValue(cachedTemplate.nodes),part.commit(),part.value=cachedTemplate.instance)}part.setValue(value)});