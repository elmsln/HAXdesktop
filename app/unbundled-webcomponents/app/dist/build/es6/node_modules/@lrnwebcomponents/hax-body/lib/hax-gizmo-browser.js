import{LitElement,html,css}from"../../../lit-element/lit-element.js";import{SimpleFilterMixin}from"../../simple-filter/simple-filter.js";import{haxElementToNode}from"../../utils/utils.js";import{HAXStore}from"./hax-store.js";import{autorun,toJS}from"../../../mobx/dist/mobx.esm.js";import"../../simple-fields/lib/simple-fields-field.js";class HaxGizmoBrowser extends(SimpleFilterMixin(LitElement)){static get styles(){return[css`
        :host {
          display: block;
        }
        .toolbar-inner {
          padding: 0;
          position: sticky;
          background-color: white;
          width: 100%;
          top: 0;
          z-index: 1;
        }
        .item-wrapper {
          text-align: center;
        }
      `]}constructor(){super(),this.where="title"}render(){return html`
      <div class="toolbar-inner">
        <simple-fields-field
          id="inputfilter"
          @value-changed="${this.inputfilterChanged}"
          aria-controls="filter"
          label="Filter"
          type="text"
          auto-validate=""
        ></simple-fields-field>
      </div>
      <div class="item-wrapper">
        ${this.filtered.map((gizmo,i)=>html`
            <hax-tray-button
              dark-bg
              voice-command="insert ${gizmo.title}"
              draggable="true"
              @dragstart="${this._dragStart}"
              @dragend="${this._dragEnd}"
              index="${i}"
              label="${gizmo.title}"
              event-name="insert-tag"
              event-data="${gizmo.tag}"
              data-demo-schema="true"
              icon="${gizmo.icon}"
              drag-color="${gizmo.color}"
            ></hax-tray-button>
          `)}
      </div>
    `}static get tag(){return"hax-gizmo-browser"}_dragStart(e){let schema=HAXStore.haxSchemaFromTag(e.target.eventData);var target;target=schema.gizmo.tag&&schema.demoSchema&&schema.demoSchema[0]?haxElementToNode(schema.demoSchema[0]):document.createElement(e.target.eventData),HAXStore.__dragTarget=target,e.dataTransfer&&(this.crt=target.cloneNode(!0),schema.gizmo.tag&&schema.demoSchema&&schema.demoSchema[0]?(this.crt.style.width="200px",this.crt.style.height="200px"):(this.crt.style.position="absolute",this.crt.style.top="-1000px",this.crt.style.right="-1000px",this.crt.style.transform="scale(0.25)"),this.crt.style.opacity=".8",this.crt.style.backgroundColor=e.target.getAttribute("drag-color"),e.dataTransfer.effectAllowed="move",e.dataTransfer.dropEffect="move",e.dataTransfer.setDragImage(this.crt,0,0)),e.stopPropagation(),e.stopImmediatePropagation()}_dragEnd(e){this.crt.remove()}inputfilterChanged(e){this.like=e.target.value}updated(changedProperties){changedProperties.forEach((oldValue,propName)=>{"activeApp"==propName&&this._activeAppChanged(this[propName],oldValue),"filtered"==propName&&this.requestUpdate()})}firstUpdated(changedProperties){super.firstUpdated&&super.firstUpdated(changedProperties),autorun(()=>{this.resetList(toJS(HAXStore.gizmoList))})}resetList(list){super.resetList(list),list&&(this.items=[...list.filter((gizmo,i)=>!gizmo||!gizmo.meta||!gizmo.meta.inlineOnly&&!gizmo.meta.hidden)])}}window.customElements.define(HaxGizmoBrowser.tag,HaxGizmoBrowser);export{HaxGizmoBrowser};