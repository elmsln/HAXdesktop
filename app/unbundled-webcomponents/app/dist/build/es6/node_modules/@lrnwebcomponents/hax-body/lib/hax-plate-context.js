import{LitElement,css,html}from"../../../lit-element/lit-element.js";import{SimpleTourFinder}from"../../simple-popover/lib/SimpleTourFinder.js";import{HAXStore}from"./hax-store.js";import"./hax-context-item-menu.js";import"./hax-context-item.js";import{autorun,toJS}from"../../../mobx/dist/mobx.esm.js";class HaxPlateContext extends(SimpleTourFinder(LitElement)){static get styles(){return[css`
        :host {
          display: block;
          margin-top: -2px;
          background-color: white;
        }
        hax-context-item {
          display: block;
        }
        hax-context-item[large] {
          display: inline-block;
          margin: 0;
          padding: 0;
        }
        hax-context-item-menu {
          --hax-context-item-menu-height: 28px;
        }
        .area {
          display: flex;
          visibility: visible;
          opacity: 0.8;
          transition: 0.2s all ease-in-out;
        }
        .area:hover {
          opacity: 1;
        }
        button {
          width: 100%;
          text-align: left;
          -webkit-justify-content: flex-start;
          justify-content: flex-start;
          height: 32px;
          padding: 4px;
          margin: 0;
          border-radius: 0;
          display: block;
          overflow: hidden;
          min-height: 24px;
          font-size: 10px;
          color: black;
        }
        #drag hax-context-item:hover,
        button:hover {
          cursor: pointer;
        }
        simple-icon {
          padding: 0 2px;
          --simple-icon-height: 16px;
          --simple-icon-width: 16px;
        }
        :host(.hax-context-pin-top) .area {
          position: fixed;
          top: 28px;
          margin-left: -2px;
          flex-direction: column;
        }
      `]}constructor(){super(),this.hasActiveEditingElement=!1,this.haxUIElement=!0,this.tourName="hax"}static get tag(){return"hax-plate-context"}render(){return html`
      <div class="area" id="area">
        <hax-context-item-menu
          mini
          ?disabled="${this.hasActiveEditingElement}"
          id="drag"
          action
          icon="hax:arrow-all"
          label="Drag handle"
          draggable="true"
          selected-value="0"
          reset-on-select
          data-simple-tour-stop
          data-stop-title="label"
        >
          <hax-context-item
            action
            mini
            dark
            ?disabled="${this.hasActiveEditingElement}"
            simple
            icon="hax:keyboard-arrow-up"
            label="Move up"
            event-name="hax-plate-up"
            direction="left"
          ></hax-context-item>
          <hax-context-item
            action
            mini
            dark
            ?disabled="${this.hasActiveEditingElement}"
            simple
            icon="hax:keyboard-arrow-down"
            label="Move down"
            event-name="hax-plate-down"
            direction="left"
          ></hax-context-item>
          <div slot="tour" data-stop-content>
            Click the drag handle once to show a menu to just move up or down
            one item in the content OR click and drag to place the item exactly
            where you want it to go.
          </div>
        </hax-context-item-menu>
        <hax-context-item
          mini
          action
          id="right"
          class="paddle"
          icon="hax:table-column-remove"
          label="Add column"
          ?disabled="${this.hasActiveEditingElement}"
          event-name="hax-plate-create-right"
          data-simple-tour-stop
          data-stop-title="label"
        >
          <div slot="tour" data-stop-content>
            Add a column to split the current column into two pieces. This can
            be done up to six pieces columns. For differnet layouts see Grid
            settings panel.
          </div>
        </hax-context-item>
        <hax-context-item
          mini
          action
          class="paddle"
          icon="hax:table-column-plus-after"
          label="Remove column"
          ?disabled="${this.hasActiveEditingElement}"
          event-name="hax-plate-remove-right"
          id="rightremove"
          data-simple-tour-stop
          data-stop-title="label"
        >
          <div slot="tour" data-stop-content>
            Remove a column from the split column layout. If at two columns and
            removing it will remove the layout split and make it 100% width.
          </div>
        </hax-context-item>
        <hax-context-item
          mini
          action
          ?disabled="${this.hasActiveEditingElement}"
          label="Duplicate"
          icon="icons:content-copy"
          event-name="hax-plate-duplicate"
          data-simple-tour-stop
          data-stop-title="label"
        >
          <div slot="tour" data-stop-content>
            Duplicate the active piece of content and place it below the current
            item.
          </div>
        </hax-context-item>
        <hax-context-item
          mini
          danger
          action
          ?disabled="${this.hasActiveEditingElement}"
          icon="delete"
          label="Remove"
          event-name="hax-plate-delete"
          data-simple-tour-stop
          data-stop-title="label"
        >
          <div slot="tour" data-stop-content>
            Delete the current item. You can always use the undo arrow to bring
            this back.
          </div>
        </hax-context-item>
      </div>
    `}__updatePlatePosition(active){let right=this.shadowRoot.querySelector("#right"),rightremove=this.shadowRoot.querySelector("#rightremove");right.disabled=!1,rightremove.disabled=!1,active&&"GRID-PLATE"==active.tagName?"1-1-1-1-1-1"==active.layout&&(right.disabled=!0):rightremove.disabled=!0}firstUpdated(changedProperties){super.firstUpdated(changedProperties),autorun(()=>{const activeNode=toJS(HAXStore.activeNode);activeNode&&this.getAttribute("on-screen")&&this.__updatePlatePosition(activeNode)}),autorun(()=>{toJS(HAXStore.activeEditingElement)?this.hasActiveEditingElement=!0:this.hasActiveEditingElement=!1}),this.shadowRoot.querySelector("#drag").addEventListener("dragstart",this._dragStart),this.shadowRoot.querySelector("#drag").addEventListener("dragend",this._dragEnd)}_dragEnd(e){HAXStore._lockContextPosition=!1}_dragStart(e){let target=toJS(HAXStore.activeNode);HAXStore.__dragTarget=target,HAXStore._lockContextPosition=!0,HAXStore.activeHaxBody.__activeHover=null,HAXStore.activeHaxBody._hideContextMenu(HAXStore.activeHaxBody.contextMenus.add),e.dataTransfer&&(e.dataTransfer.effectAllowed="move",e.dataTransfer.dropEffect="move",e.dataTransfer.setDragImage(target,-20,-20)),e.stopPropagation(),e.stopImmediatePropagation()}static get properties(){return{hasActiveEditingElement:{type:Boolean}}}}window.customElements.define(HaxPlateContext.tag,HaxPlateContext);export{HaxPlateContext};