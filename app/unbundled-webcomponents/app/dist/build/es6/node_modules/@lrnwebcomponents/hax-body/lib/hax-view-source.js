import{LitElement,html,css}from"../../../lit-element/lit-element.js";import{MtzFileDownloadBehaviors}from"../../dl-behavior/dl-behavior.js";import{stripMSWord,formatHTML}from"../../utils/utils.js";import{HAXStore}from"./hax-store.js";class HaxViewSource extends(MtzFileDownloadBehaviors(LitElement)){static get styles(){return[css`
        :host {
          display: block;
          text-align: left;
        }
        #textarea {
          margin: 0;
          padding: 0;
          font-size: 10px;
          resize: none;
          width: 100%;
          height: 50vh;
          width: -webkit-fill-available;
          background-color: transparent;
          color: #eeeeee;
          font-family: monospace;
        }
        .buttons {
          margin-top: 20px;
          display: flex;
          justify-content: space-evenly;
          width: 100%;
        }
      `]}render(){return html`
      <div id="wrapper">
        <textarea id="hiddentextarea" hidden></textarea>
        <code-editor
          id="textarea"
          title=""
          theme="vs"
          language="html"
          font-size="12"
          word-wrap
        ></code-editor>
      </div>
      <div class="buttons">
        <hax-tray-button
          label="Update source"
          icon="icons:code"
          @click="${this.importContent.bind(this)}"
        >
        </hax-tray-button>
        <hax-tray-button
          @click="${this.scrubContent.bind(this)}"
          icon="editor:format-clear"
          label="Word / GDoc clean up"
        >
        </hax-tray-button>
        <hax-tray-button
          @click="${this.selectBody.bind(this)}"
          icon="icons:content-copy"
          label="Copy source"
        >
        </hax-tray-button>
        <hax-tray-button
          label="Download"
          icon="icons:file-download"
          @click="${this.download.bind(this)}"
        >
        </hax-tray-button>
        <hax-tray-button
          @click="${this.htmlToHaxElements.bind(this)}"
          label="HAXSchema"
          icon="hax:code-json"
        >
        </hax-tray-button>
      </div>
    `}static get tag(){return"hax-view-source"}download(e){const data=this.contentToFile(!1);this.downloadFromData(data,"html","my-new-code"),HAXStore.toast("HTML content downloaded"),this.close()}downloadfull(e){const data=this.contentToFile(!0);this.downloadFromData(data,"html","my-new-webpage"),HAXStore.toast("Working offline copy downloaded"),this.close()}importContent(e){const htmlBody=this.shadowRoot.querySelector("#textarea").value;HAXStore.toast("Content updated"),HAXStore.activeHaxBody.importContent(htmlBody),this.close()}scrubContent(e){const htmlBody=this.shadowRoot.querySelector("#textarea").value;HAXStore.toast("Scrubbed, Content updated"),HAXStore.activeHaxBody.importContent(stripMSWord(htmlBody)),this.close()}close(){window.dispatchEvent(new CustomEvent("simple-modal-hide",{bubbles:!0,cancelable:!0,detail:{}}))}openSource(){import("../../code-editor/code-editor.js")}selectBody(e){let hiddenarea=this.shadowRoot.querySelector("#hiddentextarea");hiddenarea.value=this.shadowRoot.querySelector("#textarea").value,hiddenarea.removeAttribute("hidden"),hiddenarea.focus(),hiddenarea.select(),document.execCommand("copy"),hiddenarea.setAttribute("hidden","hidden"),HAXStore.toast("Copied HTML content"),this.close()}htmlToHaxElements(e){let elements=HAXStore.htmlToHaxElements(this.shadowRoot.querySelector("#textarea").value);var str=JSON.stringify(elements,null,2);let val=this.shadowRoot.querySelector("#textarea").value,hiddenarea=this.shadowRoot.querySelector("#hiddentextarea");hiddenarea.removeAttribute("hidden"),hiddenarea.value=str,hiddenarea.focus(),hiddenarea.select(),document.execCommand("copy"),hiddenarea.value=val,hiddenarea.setAttribute("hidden","hidden"),HAXStore.toast("Copied hax elements to clipboard")}firstUpdated(changedProperties){super.firstUpdated&&super.firstUpdated(changedProperties),HAXStore.activeHaxBody&&(this.shadowRoot.querySelector("#textarea").editorValue=formatHTML(HAXStore.activeHaxBody.haxToContent()))}contentToFile(full){let body=HAXStore.activeHaxBody.haxToContent();var content=body;return full&&(content=`\n        <!DOCTYPE html>\n        <html lang="en">\n          <head>\n            <meta charset="utf-8" />\n            <meta\n              name="viewport"\n              content="width=device-width, minimum-scale=1, initial-scale=1, user-scalable=yes"\n            />\n            <title>hax-body demo</title>\n            <script>window.WCGlobalCDNPath="https://cdn.webcomponents.psu.edu/cdn/"; <\/script> <script src="https://cdn.webcomponents.psu.edu/cdn/build.js"><\/script> \n            <style>\n              body {\n                padding: 32px;\n              }\n            </style>\n          </head>\n          <body>\n          ${body}\n          </body>\n        </html>\n      `),content}constructor(){super(),this.fileTypes={CSV:"text/csv",JSON:"text/json",PDF:"application/pdf",TXT:"text/plain",HTML:"text/html"}}}window.customElements.define(HaxViewSource.tag,HaxViewSource);export{HaxViewSource};