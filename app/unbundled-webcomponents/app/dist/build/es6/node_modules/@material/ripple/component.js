/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
import{__extends}from"../../tslib/tslib.es6.js";import{MDCComponent}from"../base/component.js";import{applyPassive}from"../dom/events.js";import{matches}from"../dom/ponyfill.js";import{MDCRippleFoundation}from"./foundation.js";import*as util from"./util.js";var MDCRipple=function(_super){function MDCRipple(){var _this=null!==_super&&_super.apply(this,arguments)||this;return _this.disabled=!1,_this}return __extends(MDCRipple,_super),MDCRipple.attachTo=function(root,opts){void 0===opts&&(opts={isUnbounded:void 0});var ripple=new MDCRipple(root);return void 0!==opts.isUnbounded&&(ripple.unbounded=opts.isUnbounded),ripple},MDCRipple.createAdapter=function(instance){return{addClass:function(className){return instance.root_.classList.add(className)},browserSupportsCssVars:function(){return util.supportsCssVariables(window)},computeBoundingRect:function(){return instance.root_.getBoundingClientRect()},containsEventTarget:function(target){return instance.root_.contains(target)},deregisterDocumentInteractionHandler:function(evtType,handler){return document.documentElement.removeEventListener(evtType,handler,applyPassive())},deregisterInteractionHandler:function(evtType,handler){return instance.root_.removeEventListener(evtType,handler,applyPassive())},deregisterResizeHandler:function(handler){return window.removeEventListener("resize",handler)},getWindowPageOffset:function(){return{x:window.pageXOffset,y:window.pageYOffset}},isSurfaceActive:function(){return matches(instance.root_,":active")},isSurfaceDisabled:function(){return Boolean(instance.disabled)},isUnbounded:function(){return Boolean(instance.unbounded)},registerDocumentInteractionHandler:function(evtType,handler){return document.documentElement.addEventListener(evtType,handler,applyPassive())},registerInteractionHandler:function(evtType,handler){return instance.root_.addEventListener(evtType,handler,applyPassive())},registerResizeHandler:function(handler){return window.addEventListener("resize",handler)},removeClass:function(className){return instance.root_.classList.remove(className)},updateCssVariable:function(varName,value){return instance.root_.style.setProperty(varName,value)}}},Object.defineProperty(MDCRipple.prototype,"unbounded",{get:function(){return Boolean(this.unbounded_)},set:function(unbounded){this.unbounded_=Boolean(unbounded),this.setUnbounded_()},enumerable:!0,configurable:!0}),MDCRipple.prototype.activate=function(){this.foundation_.activate()},MDCRipple.prototype.deactivate=function(){this.foundation_.deactivate()},MDCRipple.prototype.layout=function(){this.foundation_.layout()},MDCRipple.prototype.getDefaultFoundation=function(){return new MDCRippleFoundation(MDCRipple.createAdapter(this))},MDCRipple.prototype.initialSyncWithDOM=function(){var root=this.root_;this.unbounded="mdcRippleIsUnbounded"in root.dataset},MDCRipple.prototype.setUnbounded_=function(){this.foundation_.setUnbounded(Boolean(this.unbounded_))},MDCRipple}(MDCComponent);export{MDCRipple};