define(["exports","./debounce.js","./focusable.js","./shadow.js"],(function(_exports,_debounce,_focusable,_shadow){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.FocusTrap=void 0;const template=document.createElement("template");template.innerHTML='\n\t<div id="start"></div>\n\t<div id="backup"></div>\n\t<slot></slot>\n\t<div id="end"></div>\n';class FocusTrap extends HTMLElement{constructor(){super(),this.debounceId=Math.random().toString(),this._focused=!1;const shadow=this.attachShadow({mode:"open"});shadow.appendChild(template.content.cloneNode(!0)),this.$backup=shadow.querySelector("#backup"),this.$start=shadow.querySelector("#start"),this.$end=shadow.querySelector("#end"),this.focusLastElement=this.focusLastElement.bind(this),this.focusFirstElement=this.focusFirstElement.bind(this),this.onFocusIn=this.onFocusIn.bind(this),this.onFocusOut=this.onFocusOut.bind(this)}static get observedAttributes(){return["inactive"]}get inactive(){return this.hasAttribute("inactive")}set inactive(value){value?this.setAttribute("inactive",""):this.removeAttribute("inactive")}get focused(){return this._focused}connectedCallback(){this.$start.addEventListener("focus",this.focusLastElement),this.$end.addEventListener("focus",this.focusFirstElement),this.addEventListener("focusin",this.onFocusIn),this.addEventListener("focusout",this.onFocusOut),this.render()}disconnectedCallback(){this.$start.removeEventListener("focus",this.focusLastElement),this.$end.removeEventListener("focus",this.focusFirstElement),this.removeEventListener("focusin",this.onFocusIn),this.removeEventListener("focusout",this.onFocusOut)}attributeChangedCallback(){this.render()}focusFirstElement(){this.trapFocus()}focusLastElement(){this.trapFocus(!0)}getFocusableElements(){return(0,_shadow.queryShadowRoot)(this,_focusable.isHidden,_focusable.isFocusable)}trapFocus(trapToEnd){if(this.inactive)return;let focusableChildren=this.getFocusableElements();focusableChildren.length>0?(trapToEnd?focusableChildren[focusableChildren.length-1].focus():focusableChildren[0].focus(),this.$backup.setAttribute("tabindex","-1")):(this.$backup.setAttribute("tabindex","0"),this.$backup.focus())}onFocusIn(){this.updateFocused(!0)}onFocusOut(){this.updateFocused(!1)}updateFocused(value){(0,_debounce.debounce)(()=>{this.focused!==value&&(this._focused=value,this.render())},0,this.debounceId)}render(){this.$start.setAttribute("tabindex",!this.focused||this.inactive?"-1":"0"),this.$end.setAttribute("tabindex",!this.focused||this.inactive?"-1":"0"),this.focused?this.setAttribute("focused",""):this.removeAttribute("focused")}}_exports.FocusTrap=FocusTrap,window.customElements.define("focus-trap",FocusTrap)}));