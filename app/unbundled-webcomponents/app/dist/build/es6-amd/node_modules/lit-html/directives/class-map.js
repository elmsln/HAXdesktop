define(["exports","../lit-html.js"],(function(_exports,_litHtml){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.classMap=void 0;
/**
   * @license
   * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
class ClassList{constructor(element){this.classes=new Set,this.changed=!1,this.element=element;const classList=(element.getAttribute("class")||"").split(/\s+/);for(const cls of classList)this.classes.add(cls)}add(cls){this.classes.add(cls),this.changed=!0}remove(cls){this.classes.delete(cls),this.changed=!0}commit(){if(this.changed){let classString="";this.classes.forEach(cls=>classString+=cls+" "),this.element.setAttribute("class",classString)}}}const previousClassesCache=new WeakMap,classMap=(0,_litHtml.directive)(classInfo=>part=>{if(!(part instanceof _litHtml.AttributePart)||part instanceof _litHtml.PropertyPart||"class"!==part.committer.name||part.committer.parts.length>1)throw new Error("The `classMap` directive must be used in the `class` attribute and must be the only part in the attribute.");const{committer:committer}=part,{element:element}=committer;let previousClasses=previousClassesCache.get(part);void 0===previousClasses&&(element.setAttribute("class",committer.strings.join(" ")),previousClassesCache.set(part,previousClasses=new Set));const classList=element.classList||new ClassList(element);previousClasses.forEach(name=>{name in classInfo||(classList.remove(name),previousClasses.delete(name))});for(const name in classInfo){const value=classInfo[name];value!=previousClasses.has(name)&&(value?(classList.add(name),previousClasses.add(name)):(classList.remove(name),previousClasses.delete(name)))}"function"==typeof classList.commit&&classList.commit()});_exports.classMap=classMap}));