define(["exports","../../../../lit-element/lit-element.js","../../simple-colors.js"],(function(_exports,_litElement,_simpleColors){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.simpleColorsSwatchInfo=void 0;
/**
   * Copyright 2018 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */
class simpleColorsSwatchInfo extends _simpleColors.SimpleColors{static get styles(){return[...super.styles,_litElement.css`
        :host {
          display: block;
          margin: 15px 0;
        }
        :host([hidden]) {
          display: none;
        }
        :host table {
          width: 100%;
          border: 1px solid black;
          border-radius: 3px;
          border-collapse: collapse;
          margin: 0 0 15px;
        }
        :host table caption {
          font-weight: bold;
          background-color: #222;
          color: white;
        }
        :host table th {
          background-color: #e0e0e0;
        }
        :host table caption,
        :host table th,
        :host table td {
          padding: 5px;
          border: 1px solid black;
          text-align: left;
          line-height: 160%;
        }
        :host table td span {
          padding: 5px;
          white-space: nowrap;
          margin: 5px 0;
        }
      `]}render(){return _litElement.html`
      <table
        summary="Each row represents a CSS variable or class with a description of what it does without the dark attribute and with the attribute."
      >
        <caption>
          CSS Variables and Classes for ${this.swatchName}
        </caption>
        <thead>
          <tr>
            <th scope="col">Variable Name</th>
            <th scope="col">Color</th>
            <th scope="col">With <tt>dark</tt> Attribute</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <th scope="row">
              --simple-colors-default-theme-${this.swatchName}
            </th>
            <td style="${this._getBg(this.swatchId)}">default color</td>
            <td style="${this._getInverseBg(this.swatchId)}">inverted color</td>
          </tr>
          <tr>
            <th scope="row">
              --simple-colors-fixed-theme-${this.swatchName}
            </th>
            <td style="${this._getBg(this.swatchId)}">default color</td>
            <td style="${this._getBg(this.swatchId)}">fixed color</td>
          </tr>
        </tbody>
      </table>

      <table
        summary="A list of colors that meet WCAG 2.0 AA contrast requirements. Each contains all the contrasting shades for a given color, based on whether or not the text is regular or large."
      >
        <caption>
          WCAG 2.0 AA Contrast with ${this.swatchName}
        </caption>
        <thead>
          <tr>
            <th scope="col">Color Name</th>
            <th scope="col">Regular Text</th>
            <th scope="col">Large Text*</th>
          </tr>
        </thead>
        <tbody>
          ${this._getOptions(this.colors).map(color=>_litElement.html`
              <tr>
                <th scope="row">${color}</th>
                <td>
                  ${this._getAa(this.swatchId,color).map(contrast=>_litElement.html`
                        <span
                          class="contrast"
                          style="${this._getContrastBg(color,contrast)}"
                          >${color}-${contrast}</span
                        >
                      `)}
                </td>
                <td>
                  ${this._getAaLarge(this.swatchId,color).map(contrast=>_litElement.html`
                        <span
                          class="contrast"
                          style="${this._getContrastBg(color,contrast)}"
                          >${color}-${contrast}</span
                        >
                      `)}
                </td>
              </tr>
            `)}
        </tbody>
      </table>
      <p>
        <small
          >* Large text is defined as bold text at least 14pt or normal text at
          least 18pt</small
        >
      </p>
    `}constructor(){super(),this.swatchId="grey_0",this.swatchName="grey-1"}static get properties(){return{swatchId:{attribute:"swatch-id",type:String,reflect:!0},swatchName:{attribute:"swatch-name",type:String,reflect:!0}}}static get tag(){return"simple-colors-swatch-info"}_getAa(swatchId,color,aaLarge=!1){let data=swatchId.split("_"),index=parseInt(data[1]);return this.getContrastingShades(!1,data[0],index,color)}_getAaLarge(swatchId,color){return this._getAa(swatchId,color,!0)}_getBg(swatchId,inverse=!1){let colors=this._getColors(swatchId,inverse);return"background: "+colors[0]+"; color: "+colors[1]+";"}_getInverseBg(swatchId){return this._getBg(swatchId,!0)}_getOptions(obj){return Object.keys(obj)}_getContrastBg(color,shade){return this._getBg(color+"_"+(parseInt(shade)-1))}_getColors(swatchId,inverse=!1){let data=swatchId.split("_"),index=inverse?11-parseInt(data[1]):parseInt(data[1]);return[this.colors[data[0]][index],this.colors.grey[index>5?0:11]]}}_exports.simpleColorsSwatchInfo=simpleColorsSwatchInfo,window.customElements.define(simpleColorsSwatchInfo.tag,simpleColorsSwatchInfo)}));