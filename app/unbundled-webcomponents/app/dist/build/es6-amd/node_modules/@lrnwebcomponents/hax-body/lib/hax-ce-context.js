define(["exports","../../../lit-element/lit-element.js","./hax-store.js","./hax-context-item.js","./hax-toolbar.js","../../../mobx/dist/mobx.esm.js","../../utils/utils.js"],(function(_exports,_litElement,_haxStore,_haxContextItem,_haxToolbar,_mobxEsm,_utils){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.HaxCeContext=void 0;class HaxCeContext extends _litElement.LitElement{static get styles(){return[_litElement.css`
        :host {
          display: block;
        }
        hax-context-item {
          margin: 0;
        }
        :host(.hax-context-pin-top) hax-toolbar {
          position: fixed;
          top: 0px;
          flex-direction: column;
        }
        div[slot="primary"] {
          display: inline-flex;
        }
      `]}constructor(){super(),this.haxUIElement=!0,this.onScreen=!1,this.ceButtons=[],this.activeTagName="",this.activeTagIcon="hax:paragraph",this.addEventListener("hax-context-item-selected",this.handleCECustomEvent.bind(this))}updated(changedProperties){super.updated&&super.updated(changedProperties),changedProperties.forEach((oldValue,propName)=>{"onScreen"===propName&&this.onScreen&&this._resetCEMenu()})}render(){return _litElement.html`
      <hax-toolbar>
        <hax-context-item
          mini
          action
          more
          slot="prefix"
          icon="${this.activeTagIcon}"
          label="${this.activeTagName}, click to change"
          ?disabled="${this.disableTransform}"
          event-name="hax-transform-node"
        ></hax-context-item>
        ${this.ceButtons.map(el=>_litElement.html` <hax-context-item
            mini
            action
            slot="prefix"
            icon="${el.icon}"
            label="${el.label}"
            event-name="hax-ce-custom-button"
            value="${el.callback}"
          ></hax-context-item>`)}
        <div slot="primary">
          <slot></slot>
        </div>
        <hax-context-item
          mini
          action
          slot="primary"
          icon="icons:code"
          label="Modify HTML source"
          ?disabled="${!this.sourceView}"
          event-name="hax-source-view-toggle"
        ></hax-context-item>
        <hax-context-item-textop
          action
          menu
          slot="more"
          icon="hardware:keyboard-arrow-up"
          event-name="insert-above-active"
          >Insert item above</hax-context-item-textop
        >
        <hax-context-item-textop
          action
          menu
          slot="more"
          icon="hardware:keyboard-arrow-down"
          event-name="insert-below-active"
          >Insert item below</hax-context-item-textop
        >
      </hax-toolbar>
    `}static get tag(){return"hax-ce-context"}static get properties(){return{disableTransform:{type:Boolean},onScreen:{type:Boolean,attribute:"on-screen",reflect:!0},sourceView:{type:Boolean},activeTagIcon:{type:String},activeTagName:{type:String},ceButtons:{type:Array}}}handleCECustomEvent(e){let detail=e.detail;switch(detail.eventName){case"hax-ce-custom-button":this.activeNode&&"function"==typeof this.activeNode[detail.value]&&this.activeNode[detail.value](e)&&_haxStore.HAXStore.refreshActiveNodeForm()}}firstUpdated(changedProperties){super.firstUpdated&&super.firstUpdated(changedProperties),(0,_mobxEsm.autorun)(()=>{this.activeNode=(0,_mobxEsm.toJS)(_haxStore.HAXStore.activeNode),this.activeNode&&this.activeNode.classList&&this._resetCEMenu()})}_resetCEMenu(){if(this.shadowRoot&&(0,_utils.wipeSlot)(this,"*"),this.ceButtons=[],_haxStore.HAXStore.activeHaxBody&&null!=this.activeNode){let schema=_haxStore.HAXStore.haxSchemaFromTag(this.activeNode.tagName);this.sourceView=schema.canEditSource,_haxStore.HAXStore.isTextElement(this.activeNode)||(this.disableTransform=!_haxStore.HAXStore.activeHaxBody.canTansformNode(this.activeNode),_haxStore.HAXStore.activeGizmo&&(this.activeTagName=_haxStore.HAXStore.activeGizmo.title,this.activeTagIcon=_haxStore.HAXStore.activeGizmo.icon))}else this.activeTagName="",this.activeTagIcon="hax:paragraph";_haxStore.HAXStore.runHook(this.activeNode,"inlineContextMenu",[this])}}_exports.HaxCeContext=HaxCeContext,window.customElements.define(HaxCeContext.tag,HaxCeContext)}));