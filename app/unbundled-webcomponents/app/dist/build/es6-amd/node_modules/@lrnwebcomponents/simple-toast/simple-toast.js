define(["exports","../../lit-element/lit-element.js","../simple-colors/simple-colors.js","./lib/simple-toast-el.js"],(function(_exports,_litElement,_simpleColors,_simpleToastEl){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.SimpleToast=_exports.SimpleToastStore=void 0,
/**
   * Copyright 2018 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */
window.SimpleToast=window.SimpleToast||{},window.SimpleToast.requestAvailability=()=>(window.SimpleToast.instance||(window.SimpleToast.instance=document.createElement("simple-toast"),document.body.appendChild(window.SimpleToast.instance)),window.SimpleToast.instance);const SimpleToastStore=window.SimpleToast.requestAvailability();_exports.SimpleToastStore=SimpleToastStore;class SimpleToast extends _simpleColors.SimpleColors{static get styles(){return[...super.styles,_litElement.css`
        :host {
          display: block;
        }

        :host([hidden]) {
          display: none;
        }

        simple-toast-el {
          box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);
          width: var(--simple-toast-width, auto);
          color: var(
            --simple-toast-color,
            var(--simple-colors-default-theme-accent-1, white)
          );
          background-color: var(
            --simple-toast-bg,
            var(--simple-colors-default-theme-accent-12, black)
          );
          top: var(--simple-toast-top);
          margin: var(--simple-toast-margin, 8px);
          padding: var(--simple-toast-padding, 16px);
          left: var(--simple-toast-left, 36px);
          bottom: var(--simple-toast-bottom, 36px);
          right: var(--simple-toast-right);
          border: var(--simple-toast-border);
          z-index: var(--simple-toast-z-index, 1000);
          font-size: var(--simple-toast-font-size);
        }

        button {
          margin-left: 8px;
        }
      `]}render(){return _litElement.html` <simple-toast-el
      id="toast"
      accent-color="${this.accentColor}"
      ?dark="${this.dark}"
      text="${this.text}"
      duration="${this.duration}"
      ?opened="${this.opened}"
      @opened-changed="${this.openedChanged}"
      .class="${this.classStyle}"
    >
      <slot></slot>
      <button .hidden="${!this.closeButton}" @click="${this.hide}">
        ${this.closeText}
      </button>
    </simple-toast-el>`}static get properties(){return{...super.properties,opened:{type:Boolean,reflect:!0},text:{type:String},classStyle:{type:String,attribute:"class-style"},closeText:{type:String,attribute:"close-text"},duration:{type:Number},eventCallback:{type:String,attribute:"event-callback"},closeButton:{type:Boolean,reflect:!0,attribute:"close-button"}}}static get tag(){return"simple-toast"}constructor(){super(),this.setDefaultToast()}connectedCallback(){super.connectedCallback(),window.addEventListener("simple-toast-hide",this.hideSimpleToast.bind(this)),window.addEventListener("simple-toast-show",this.showSimpleToast.bind(this))}disconnectedCallback(){window.removeEventListener("simple-toast-hide",this.hideSimpleToast.bind(this)),window.removeEventListener("simple-toast-show",this.showSimpleToast.bind(this)),super.disconnectedCallback()}hideSimpleToast(e){this.hide()}openedChanged(e){this.opened=e.detail.value}setDefaultToast(){for(this.opened=!1,this.text="Saved",this.classStyle="",this.closeText="Close",this.duration=3e3,this.accentColor="grey",this.dark=!1,this.eventCallback=null,this.closeButton=!0;null!==this.firstChild;)this.removeChild(this.firstChild)}showSimpleToast(e){this.setDefaultToast(),e.detail.duration&&(this.duration=e.detail.duration),e.detail.text&&(this.text=e.detail.text),e.detail.classStyle&&(this.classStyle=e.detail.classStyle),e.detail.closeText&&(this.closeText=e.detail.closeText),e.detail.closeButton&&(this.closeButton=e.detail.closeButton),e.detail.eventCallback&&(this.eventCallback=e.detail.eventCallback),e.detail.slot&&this.appendChild(e.detail.slot),e.detail.accentColor&&(this.accentColor=e.detail.accentColor),e.detail.dark&&(this.dark=e.detail.dark),this.show()}show(e){this.opened=!0}hide(e){if(this.eventCallback){const evt=new CustomEvent(this.eventCallback,{bubbles:!0,cancelable:!0,detail:!0,composed:!0});this.dispatchEvent(evt)}this.opened=!1}}_exports.SimpleToast=SimpleToast,window.customElements.define(SimpleToast.tag,SimpleToast)}));