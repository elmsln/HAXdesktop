define(["exports","../../lit-element/lit-element.js","../responsive-utility/lib/responsive-utility-behaviors.js","../simple-icon/lib/simple-icon-lite.js","../simple-icon/lib/simple-icons.js","../simple-tooltip/simple-tooltip.js","./lib/a11y-tab.js"],(function(_exports,_litElement,_responsiveUtilityBehaviors,_simpleIconLite,_simpleIcons,_simpleTooltip,_a11yTab){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.A11yTabs=void 0;
/**
   * Copyright 2019 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */
class A11yTabs extends((0,_responsiveUtilityBehaviors.ResponsiveUtilityBehaviors)(_litElement.LitElement)){static get styles(){return[_litElement.css`
        :host {
          display: block;
          height: var(--a11y-tabs-height);
          overflow: var(--a11y-tabs-overflow);
          font-size: var(--a11y-tabs-font-size, unset);
          font-family: var(--a11y-tabs-font-family, unset);
          --a11y-tabs-width: 100%;
          --a11y-tabs-background: white;
          --a11y-tabs-border-color: #ddd;
          --a11y-tabs-color: #000;
          --a11y-tabs-faded-color: #333;
          --a11y-tabs-focus-color: var(-a11y-tabs-color);
          --a11y-tabs-faded-background: #f8f8f8;
          --a11y-tabs-disabled-color: #999;
          --a11y-tabs-disabled-background: #eee;
          --a11y-tabs-border-radius: 2px;
          --a11y-tabs-horizontal-background: var(--a11y-tabs-background, white);
          --a11y-tabs-horizontal-border-radius: var(
            --a11y-tabs-border-radius,
            2px
          );
          --a11y-tabs-vertical-border-radius: var(
            --a11y-tabs-border-radius,
            2px
          );
          --a11y-tabs-content-background: var(--a11y-tabs-background, white);
          --a11y-tabs-content-padding: 16px;
          --a11y-tabs-button-padding: 4px;
          --a11y-tabs-vertical-button-padding: var(
            --a11y-tabs-button-padding,
            4px
          );
          --a11y-tabs-horizontal-button-padding: var(
            --a11y-tabs-button-padding,
            4px
          );
          --a11y-tabs-width: auto;
        }

        :host([vertical]) {
          border: 1px solid var(--a11y-tabs-border-color);
          border-radius: var(--a11y-tabs-vertical-border-radius, 2px);
          display: flex;
          justify-content: space-between;
          align-items: stretch;
        }

        :host([hidden]) {
          display: none;
        }

        #tabs {
          align-items: stretch;
          flex-wrap: var(--a11y-tabs-wrap, unset);
          margin: 0;
          display: flex;
          list-style: none;
          padding: 0;
          overflow: auto;
          max-width: 100%;
          overflow-x: auto;
          z-index: 1;
          justify-content: var(--a11y-tabs-horizontal-justify-tabs);
          background-color: var(--a11y-tabs-horizontal-background);
          font-family: var(
            --a11y-tabs-tab-font-family,
            var(--a11y-tabs-font-family, unset)
          );
          font-size: var(
            --a11y-tabs-tab-font-size,
            var(--a11y-tabs-font-size, unset)
          );
        }

        :host([vertical]) #tabs {
          border-left: none;
          flex: 0 0 auto;
          flex-direction: column;
          overflow-y: auto;
          max-width: unset;
          overflow-x: unset;
          z-index: unset;
          background-color: var(--a11y-tabs-vertical-background);
          justify-content: var(--a11y-tabs-vertical-justify-tabs);
          flex-wrap: var(--a11y-tabs-vertical-wrap);
        }

        :host([sticky]) #tabs {
          position: sticky;
          top: 0;
        }

        #tabs li {
          display: flex;
          align-items: stretch;
        }

        :host([full-width]) #tabs li {
          width: 100%;
        }

        :host([vertical]) #tabs li {
          flex-direction: column;
        }

        #tabs .flag-type {
          position: absolute;
          left: -99999px;
          height: 0;
          overflow: hidden;
        }

        #content {
          padding: var(--a11y-tabs-content-padding);
          background-color: var(--a11y-tabs-content-background);
          border: 1px solid var(--a11y-tabs-border-color);
          flex: 1 1 calc(100% - 2 * var(--a11y-tabs-content-padding));
          overflow: auto;
        }

        :host([vertical]) #content {
          border: none;
        }

        :host(:not([vertical])) #content {
          border-radius: var(--a11y-tabs-horizontal-border-radius, 2px);
          margin-top: -1px;
        }

        #tabs button {
          width: 100%;
          min-width: unset;
          margin: 0;
          text-transform: unset;
          color: var(--a11y-tabs-faded-color);
          border: 1px solid var(--a11y-tabs-border-color);
          background-color: var(--a11y-tabs-faded-background);
          padding: var(--a11y-tabs-horizontal-button-padding);
          font-weight: var(--a11y-tabs-font-weight, normal);
          border-radius: var(--a11y-tabs-horizontal-border-radius, 2px)
            var(--a11y-tabs-horizontal-border-radius, 2px) 0 0;
        }

        button .label {
          text-decoration: var(--a11y-tabs-text-decoration, none);
        }

        :host(:not([vertical])) #tabs button {
          border-top-color: var(--a11y-tabs-border-accent);
        }

        :host(:not([vertical])) #tabs li:not(:first-of-type) button {
          border-left: none;
        }

        :host([vertical]) #tabs button {
          border-top: none;
          border-radius: 0;
          display: flex;
          justify-content: space-between;
          align-items: center;
          border-left-color: var(--a11y-tabs-border-accent);
          padding: var(--a11y-tabs-vertical-button-padding);
        }

        #tabs button:focus,
        #tabs button:hover {
          color: var(--a11y-tabs-focus-color);
          font-weight: var(--a11y-tabs-focus-font-weight, normal);
        }

        button:focus .label,
        button:hover .label {
          text-decoration: var(--a11y-tabs-focus-text-decoration, underline);
        }

        :host(:not([vertical])) #tabs button:focus,
        :host(:not([vertical])) #tabs button:hover {
          border-top-color: var(--a11y-tabs-focus-border-accent);
        }

        :host([vertical]) #tabs button:focus,
        :host([vertical]) #tabs button:hover {
          border-left-color: var(--a11y-tabs-focus-border-accent);
        }

        #tabs button[aria-selected="true"] {
          font-weight: var(--a11y-tabs-selected-font-weight, normal);
          color: var(--a11y-tabs-selected-color, var(--a11y-tabs-focus-color));
          background-color: var(--a11y-tabs-background);
        }

        button[aria-selected="true"] .label {
          text-decoration: var(--a11y-tabs-selected-text-decoration, none);
        }

        :host(:not([vertical])) #tabs button[aria-selected="true"] {
          border-bottom-color: var(--a11y-tabs-background);
          border-top-color: var(--a11y-tabs-selected-border-accent);
        }

        :host([vertical]) #tabs button[aria-selected="true"] {
          border-right-color: var(--a11y-tabs-background);
          border-left-color: var(--a11y-tabs-selected-border-accent);
        }

        #tabs button[disabled] {
          color: var(--a11y-tabs-disabled-color);
          background-color: var(--a11y-tabs-disabled-background);
          cursor: not-allowed;
        }

        :host(:not([vertical])) #tabs button[disabled] {
          border-left-color: var(--a11y-tabs-disabled-border-accent);
        }

        :host([vertical]) #tabs button[disabled] {
          border-top-color: var(--a11y-tabs-disabled-border-accent);
        }

        #tabs span.label,
        #tabs .flag-icon {
          margin-right: 8px;
        }

        :host([icons-only]) #tabs button {
          justify-content: center;
        }

        :host([icons-only]) #tabs span.label {
          display: none;
        }

        :host(:not([icons-only])) #tabs #tabs simple-tooltip {
          display: none;
        }

        simple-icon-lite:not([hidden]) {
          display: inline-block;
        }

        simple-icon-lite[hidden] {
          display: none;
        }
      `]}render(){return _litElement.html` <ul id="tabs" role="tablist">
        ${this.tabs.map((tab,i)=>_litElement.html` <li>${this._tabButton(tab,i)}</li> `)}
      </ul>
      <div id="content">
        <slot></slot>
      </div>`}static get haxProperties(){return{canScale:!1,canPosition:!0,canEditSource:!0,gizmo:{title:"Tabs",description:"A set of tabs.",icon:"view-day",color:"grey",groups:["Content","Presentation","Tabs"]},settings:{configure:[{property:"ariaLabel",title:"Label (for accesibility)",inputMethod:"textfield"},{property:"disabled",title:"Disabled",inputMethod:"boolean"},{property:"hidden",title:"Hidden",inputMethod:"boolean"},{property:"sticky",title:"Sticky.",desc:"Horizontal tabs stick to the top of the window when scrolling.",inputMethod:"boolean"},{property:"layoutBreakpoint",title:"Layout Breakpoint",inputMethod:"Number",descripton:"Optional minimum breakpoint for horizontal layout of tabs. Default is unset (always horizontal). Setting `-1` forces vertical-only mode."},{property:"iconBreakpoint",title:"Icon Breakpoint",inputMethod:"Number",descripton:"Optional minimum breakpoint for showing tab text with icons. Default is always text with icons (0). Setting to -1 forces icon-only mode."},{slot:"",title:"Tabs",description:"A series of <a11y-tab/> elements.",inputMethod:"code-editor"}],advanced:[{property:"id",title:"Unique ID",inputMethod:"textfield"}]}}}static get properties(){return{...super.properties,ariaLabel:{type:String,reflect:!0,attribute:"aria-label"},activeTab:{type:String,reflect:!0,attribute:"active-tab"},fullWidth:{type:Boolean,reflect:!0,attribute:"full-width"},disabled:{type:Boolean,reflect:!0,attribute:"disabled"},hidden:{type:Boolean,reflect:!0,attribute:"hidden"},iconBreakpoint:{type:Number,attribute:"icon-breakpoint"},id:{type:String,reflect:!0},layoutBreakpoint:{type:Number,attribute:"layout-breakpoint"},responsiveSize:{type:String,reflect:!0,attribute:"responsive-size"},sticky:{type:Boolean,reflect:!0,attribute:"sticky"},__tabs:{type:Array},__tabButtons:{type:Array},__tabFocus:{type:Number}}}static get tag(){return"a11y-tabs"}constructor(){super(),this.fullWidth=!1,this.disableResponsive=!1,this.disabled=!1,this.hidden=!1,this.__tabs=[],this.__tabFocus=0,this.addEventListener("a11y-tab-changed",e=>this.updateTabs())}get buttons(){return this.__tabButtons}get iconsOnly(){return this.iconBreakpoint&&(this.tabs||[]).filter(tab=>!tab.icon).length<1&&this.responsiveWidth<this.iconBreakpoint}get observer(){return new MutationObserver(()=>this.updateTabs())}get tabQuery(){return"a11y-tab"}get tabs(){return Object.keys(this.__tabs||{}).map(i=>(this.__tabs[i].order=i+1,this.__tabs[i].total=this.__tabs.length,this.__tabs[i]))}get vertical(){return this.layoutBreakpoint&&this.layoutBreakpoint<this.responsiveWidth}connectedCallback(){super.connectedCallback(),this.updateTabs(),this.observer.observe(this,{attributes:!1,childList:!0,subtree:!1})}disconnectedCallback(){this.observer&&this.observer.disconnect&&this.observer.disconnect(),super.disconnectedCallback()}updated(changedProperties){changedProperties.forEach((oldValue,propName)=>{"id"===propName&&this._idChanged(this.id,oldValue),"activeTab"===propName&&this.activeTab!==oldValue&&this._activeTabChanged(this.activeTab,oldValue),"responsiveWidth"===propName&&(this.vertical?this.setAttribute("vertical",!0):this.removeAttribute("vertical")),["iconsBreakpoint","responsiveWidth","__tabs"].includes(propName)&&(this.iconsOnly?this.setAttribute("icons-only",!0):this.removeAttribute("icons-only"))})}selectTab(id){let tabs=this.querySelectorAll(this.tabQuery);if(tabs&&tabs.length>0){let enabled=Object.keys(tabs||[]).filter(key=>!tabs[key].disabled).map(key=>tabs[key].id),selected=enabled.filter(tabid=>tabid===id)[0]||enabled[0];tabs.forEach(tab=>{tab.hidden=tab.id!==selected}),this.activeTab=selected}}updateTabs(e){this.__tabs=this.querySelectorAll(this.tabQuery),this.__tabButtons=this.shadowRoot.querySelectorAll("[role=tab]"),this.selectTab(this.activeTab)}_activeTabChanged(newValue,oldValue){newValue!==oldValue&&this.selectTab(newValue),window.dispatchEvent(new CustomEvent("active-tab-changed",{bubbles:!0,cancelable:!0,composed:!0,detail:this}))}_generateUUID(){return"ss-s-s-s-sss".replace(/s/g,Math.floor(65536*(1+Math.random())).toString(16).substring(1))}_handleTab(tab){tab.disabled||(this.activeTab=tab.id)}_handleKey(i,e){this.__tabFocus=i;let focus=(dir=1)=>{this.__tabFocus=this.__tabFocus+dir,this.__tabFocus>=this.buttons.length?this.__tabFocus=0:this.__tabFocus<0&&(this.__tabFocus=this.buttons.length-1),this.buttons[this.__tabFocus].disabled&&this.__tabFocus!==i&&focus(dir)};39!==e.keyCode&&37!==e.keyCode||(this.buttons[i].setAttribute("tabindex",-1),focus(39===e.keyCode?1:-1),this.buttons[this.__tabFocus].disabled||(this.buttons[this.__tabFocus].setAttribute("tabindex",0),this.buttons[this.__tabFocus].focus()))}_idChanged(newValue,oldValue){newValue||(this.id="a11y-tabs"+this._generateUUID())}_tabButton(tab,i){return _litElement.html`
      <button
        id="${tab.id}-button"
        aria-selected="${tab.id===this.activeTab?"true":"false"}"
        aria-controls="${tab.id}"
        class="${tab.id!==this.activeTab||this.disabled?"":"active"}"
        .flag="${tab.flag}"
        @click="${e=>this._handleTab(tab)}"
        @keydown="${e=>this._handleKey(i,e)}"
        ?disabled="${tab.disabled||this.disabled}"
        tabindex="${tab.id===this.activeTab?0:-1}"
        role="tab"
      >
        ${this._tabIcon(tab,"flagIcon")} ${this._tabLabel(tab)}
        ${this._tabFlag(tab)} ${this._tabIcon(tab,"icon")}
      </button>
      ${this._tabTooltip(tab)}
    `}_tabFlag(tab){return _litElement.html`
      <span class="flag-type" ?hidden="${!tab.flag}"> ${tab.flag} </span>
    `}_tabIcon(tab,icon){return tab.flag?_litElement.html`
          <simple-icon-lite
            class="icon"
            ?hidden="${!tab[icon]}"
            .icon="${tab[icon]}"
            .title="${tab.flag}"
          >
          </simple-icon-lite>
        `:_litElement.html`
          <simple-icon-lite
            class="icon"
            ?hidden="${!tab[icon]}"
            .icon="${tab[icon]}"
          >
          </simple-icon-lite>
        `}_tabLabel(tab){return _litElement.html` <span class="label">${tab.label}</span> `}_tabTooltip(tab){return _litElement.html`
      <simple-tooltip for="${tab.id}-button"> ${tab.label} </simple-tooltip>
    `}}_exports.A11yTabs=A11yTabs,window.customElements.define(A11yTabs.tag,A11yTabs)}));