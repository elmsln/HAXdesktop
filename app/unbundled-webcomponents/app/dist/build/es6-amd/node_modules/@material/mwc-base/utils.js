define(["exports","../dom/ponyfill.js"],(function(_exports,_ponyfill){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.findAssignedElement=function findAssignedElement(slot,selector){for(const node of slot.assignedNodes({flatten:!0}))if(isNodeElement(node)){const el=node;if((0,_ponyfill.matches)(el,selector))return el}return null},_exports.addHasRemoveClass=function addHasRemoveClass(element){return{addClass:className=>{element.classList.add(className)},removeClass:className=>{element.classList.remove(className)},hasClass:className=>element.classList.contains(className)}},_exports.doesElementContainFocus=_exports.deepActiveElementPath=_exports.supportsPassiveEventListener=_exports.isNodeElement=void 0;
/**
  @license
  Copyright 2018 Google Inc. All Rights Reserved.
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
const isNodeElement=node=>node.nodeType===Node.ELEMENT_NODE;_exports.isNodeElement=isNodeElement;let supportsPassive=!1;const fn=()=>{},optionsBlock={get passive(){return supportsPassive=!0,!1}};document.addEventListener("x",fn,optionsBlock),document.removeEventListener("x",fn);const supportsPassiveEventListener=supportsPassive;_exports.supportsPassiveEventListener=supportsPassiveEventListener;const deepActiveElementPath=(doc=window.document)=>{let activeElement=doc.activeElement;const path=[];if(!activeElement)return path;for(;activeElement&&(path.push(activeElement),activeElement.shadowRoot);)activeElement=activeElement.shadowRoot.activeElement;return path};_exports.deepActiveElementPath=deepActiveElementPath;_exports.doesElementContainFocus=element=>{const activePath=deepActiveElementPath();if(!activePath.length)return!1;const deepActiveElement=activePath[activePath.length-1],focusEv=new Event("check-if-focused",{bubbles:!0,composed:!0});let composedPath=[];const listener=ev=>{composedPath=ev.composedPath()};return document.body.addEventListener("check-if-focused",listener),deepActiveElement.dispatchEvent(focusEv),document.body.removeEventListener("check-if-focused",listener),-1!==composedPath.indexOf(element)}}));