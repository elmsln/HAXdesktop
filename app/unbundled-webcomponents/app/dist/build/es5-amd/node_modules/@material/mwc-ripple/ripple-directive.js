define(["exports","../dom/events.js","../dom/ponyfill.js","../ripple/foundation.js","../ripple/util.js","../../lit-html/lit-html.js","./mwc-ripple-global-css.js"],function(_exports,_events,_ponyfill,_foundation,_util,_litHtml,_mwcRippleGlobalCss){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.ripple=_exports.rippleNode=void 0;_foundation=babelHelpers.interopRequireDefault(_foundation);/**
@license
Copyright 2018 Google Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/var supportsCssVariablesWin=(0,_util.supportsCssVariables)(window),RippleIntermediate=/*#__PURE__*/function(){function RippleIntermediate(foundation){babelHelpers.classCallCheck(this,RippleIntermediate);this.foundation=foundation}babelHelpers.createClass(RippleIntermediate,[{key:"startPress",value:function startPress(){this.foundation.activate()}},{key:"endPress",value:function endPress(){this.foundation.deactivate()}},{key:"startFocus",value:function startFocus(){this.foundation.handleFocus()}},{key:"endFocus",value:function endFocus(){this.foundation.handleBlur()}},{key:"destroy",value:function destroy(){this.foundation.destroy()}},{key:"setUnbounded",value:function setUnbounded(value){this.foundation.setUnbounded(value)}}]);return RippleIntermediate}(),isSafari=navigator.userAgent.match(/Safari/),didApplyRippleStyle=!1,applyRippleStyle=function applyRippleStyle(){didApplyRippleStyle=!0;var styleElement=document.createElement("style"),part=new _litHtml.NodePart({templateFactory:_litHtml.templateFactory});part.appendInto(styleElement);part.setValue(_mwcRippleGlobalCss.style);part.commit();// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
document.head.appendChild(styleElement)},rippleNode=function rippleNode(options){if(isSafari&&!didApplyRippleStyle){applyRippleStyle()}// TODO(sorvell): This directive requires bringing css yourself. We probably
// need to do this because of ShadyCSS, but on Safari, the keyframes styling
// must be global. Perhaps this directive could fix that.
var surfaceNode=options.surfaceNode,interactionNode=options.interactionNode||surfaceNode;// only style interaction node if not in the same root
if(interactionNode.getRootNode()!==surfaceNode.getRootNode()){if(""===interactionNode.style.position){interactionNode.style.position="relative"}}var adapter={browserSupportsCssVars:function browserSupportsCssVars(){return supportsCssVariablesWin},isUnbounded:function isUnbounded(){return options.unbounded===void 0?!0:options.unbounded},isSurfaceActive:function isSurfaceActive(){return(0,_ponyfill.matches)(interactionNode,":active")},isSurfaceDisabled:function isSurfaceDisabled(){return!!interactionNode.hasAttribute("disabled")},addClass:function addClass(className){return surfaceNode.classList.add(className)},removeClass:function removeClass(className){return surfaceNode.classList.remove(className)},containsEventTarget:function containsEventTarget(target){return interactionNode.contains(target)},registerInteractionHandler:function registerInteractionHandler(type,handler){return interactionNode.addEventListener(type,handler,(0,_events.applyPassive)())},deregisterInteractionHandler:function deregisterInteractionHandler(type,handler){return interactionNode.removeEventListener(type,handler,(0,_events.applyPassive)())},registerDocumentInteractionHandler:function registerDocumentInteractionHandler(evtType,handler){return(// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
document.documentElement.addEventListener(evtType,handler,(0,_events.applyPassive)()))},deregisterDocumentInteractionHandler:function deregisterDocumentInteractionHandler(evtType,handler){return(// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
document.documentElement.removeEventListener(evtType,handler,(0,_events.applyPassive)()))},registerResizeHandler:function registerResizeHandler(handler){return window.addEventListener("resize",handler)},deregisterResizeHandler:function deregisterResizeHandler(handler){return window.removeEventListener("resize",handler)},updateCssVariable:function updateCssVariable(varName,value){return surfaceNode.style.setProperty(varName,value)},computeBoundingRect:function computeBoundingRect(){return surfaceNode.getBoundingClientRect()},getWindowPageOffset:function getWindowPageOffset(){return{x:window.pageXOffset,y:window.pageYOffset}}},rippleFoundation=new _foundation.default(adapter);rippleFoundation.init();return new RippleIntermediate(rippleFoundation)};/**
 * force the ripple directive to share API names with `mwc-ripple` after Closure
 * Compiler.
 */_exports.rippleNode=rippleNode;var rippleInteractionNodes=new WeakMap,ripple=(0,_litHtml.directive)(function(){var options=0<arguments.length&&arguments[0]!==void 0?arguments[0]:{};return function(part){var surfaceNode=part.committer.element,interactionNode=options.interactionNode||surfaceNode,rippleFoundation=part.value,existingInteractionNode=rippleInteractionNodes.get(rippleFoundation);if(existingInteractionNode!==void 0&&existingInteractionNode!==interactionNode){rippleFoundation.destroy();rippleFoundation=_litHtml.noChange}// make the ripple, if needed
if(rippleFoundation===_litHtml.noChange){rippleFoundation=rippleNode(Object.assign({},options,{surfaceNode:surfaceNode}));rippleInteractionNodes.set(rippleFoundation,interactionNode);part.setValue(rippleFoundation);// otherwise update settings as needed.
}else{if(options.unbounded!==void 0){rippleFoundation.setUnbounded(options.unbounded)}if(options.disabled!==void 0){rippleFoundation.setUnbounded(options.disabled)}}if(!0===options.active){rippleFoundation.startPress()}else if(!1===options.active){rippleFoundation.endPress()}}});/**
 * A directive that applies a Material ripple to a part node. The directive
 * should be applied to a PropertyPart.
 * @param options {RippleOptions}
 */_exports.ripple=ripple});