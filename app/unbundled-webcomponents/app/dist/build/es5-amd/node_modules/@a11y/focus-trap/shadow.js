define(["exports"],function(_exports){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.queryShadowRoot=queryShadowRoot;/**
 * Traverses the slots of the open shadowroots and returns all children matching the query.
 * @param {ShadowRoot | HTMLElement} root
 * @param skipNode
 * @param isMatch
 * @param {number} maxDepth
 * @param {number} depth
 * @returns {HTMLElement[]}
 */function queryShadowRoot(root,skipNode,isMatch){var maxDepth=3<arguments.length&&arguments[3]!==void 0?arguments[3]:20,depth=4<arguments.length&&arguments[4]!==void 0?arguments[4]:0,matches=[];// If the depth is above the max depth, abort the searching here.
if(depth>=maxDepth){return matches}// Traverses a slot element
for(var traverseSlot=function traverseSlot($slot){// Only check nodes that are of the type Node.ELEMENT_NODE
// Read more here https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType
var assignedNodes=$slot.assignedNodes().filter(function(node){return 1===node.nodeType});if(0<assignedNodes.length){return queryShadowRoot(assignedNodes[0].parentElement,skipNode,isMatch,maxDepth,depth+1)}return[]},children=Array.from(root.children||[]),_i=0,_children=children,$child;_i<_children.length;_i++){$child=_children[_i];// Check if the node and its descendants should be skipped
if(skipNode($child)){continue}// If the child matches we always add it
if(isMatch($child)){matches.push($child)}if(null!=$child.shadowRoot){matches.push.apply(matches,babelHelpers.toConsumableArray(queryShadowRoot($child.shadowRoot,skipNode,isMatch,maxDepth,depth+1)))}else if("SLOT"===$child.tagName){matches.push.apply(matches,babelHelpers.toConsumableArray(traverseSlot($child)))}else{matches.push.apply(matches,babelHelpers.toConsumableArray(queryShadowRoot($child,skipNode,isMatch,maxDepth,depth+1)))}}return matches}});