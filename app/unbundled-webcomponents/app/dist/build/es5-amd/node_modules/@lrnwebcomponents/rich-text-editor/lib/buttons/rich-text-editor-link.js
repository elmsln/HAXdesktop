define(["exports","../../../../lit-element/lit-element.js","./rich-text-editor-prompt-button.js"],function(_exports,_litElement,_richTextEditorPromptButton){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.RichTextEditorLink=void 0;function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable});keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1,source;i<arguments.length;i++){source=null!=arguments[i]?arguments[i]:{};if(i%2){ownKeys(Object(source),!0).forEach(function(key){babelHelpers.defineProperty(target,key,source[key])})}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source))}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}}return target}/**
 * `rich-text-editor-link`
 * a button for rich text editor (custom buttons can extend this)
 *
 * @element rich-text-editor-link
 * @demo ./demo/buttons.html
 */var RichTextEditorLink=/*#__PURE__*/function(_RichTextEditorPrompt){babelHelpers.inherits(RichTextEditorLink,_RichTextEditorPrompt);babelHelpers.createClass(RichTextEditorLink,[{key:"render",// render function for template
value:function render(){return babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorLink.prototype),"render",this).call(this)}// properties available to the custom element for data binding
}],[{key:"tag",/**
   * Store the tag name to make it easier to obtain directly.
   */get:function get(){return"rich-text-editor-link"}},{key:"properties",get:function get(){return _objectSpread({},babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorLink),"properties",this))}}]);function RichTextEditorLink(){var _this;babelHelpers.classCallCheck(this,RichTextEditorLink);_this=babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(RichTextEditorLink).call(this));_this.fields=[].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorLink.prototype),"fields",babelHelpers.assertThisInitialized(_this))),[{property:"href",title:"Link",inputMethod:"url",autoValidate:!0}]);_this.command="CreateLink";_this.icon="link";_this.label="Link";_this.toggledCommand="unlink";_this.toggledIcon="mdextra:unlink";_this.toggledLabel="Unlink";_this.toggles="true",_this.tag="a";_this.value=_objectSpread({},babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorLink.prototype),"value",babelHelpers.assertThisInitialized(_this)),{href:null});_this.shortcutKeys="ctrl+k";return _this}/**
   * overrides default block selectors
   *
   * @readonly
   * @memberof RichTextEditorLink
   */babelHelpers.createClass(RichTextEditorLink,[{key:"getValue",/**
   * updates prompt fields with selected range data
   */value:function getValue(){var target=this.rangeElement();return _objectSpread({},babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorLink.prototype),"getValue",this).call(this),{href:target&&target.getAttribute?target.getAttribute("href"):void 0})}},{key:"setToggled",value:function setToggled(){this.toggled=!!this.getPropValue("href")}},{key:"blockSelectors",get:function get(){return"a"}/**
   * determaines commandVal based on values passed from prompt
   */},{key:"promptCommandVal",get:function get(){return this.getPropValue("href")||void 0}/**
   * whether button is toggled
   *
   * @readonly
   * @memberof RichTextEditorButton
   */},{key:"isToggled",get:function get(){return this.toggled}}]);return RichTextEditorLink}((0,_richTextEditorPromptButton.RichTextEditorPromptButtonBehaviors)(_litElement.LitElement));_exports.RichTextEditorLink=RichTextEditorLink;window.customElements.define(RichTextEditorLink.tag,RichTextEditorLink)});