define(["exports","../../../../lit-element/lit-element.js","./rich-text-editor-prompt-button.js"],function(_exports,_litElement,_richTextEditorPromptButton){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.RichTextEditorImage=void 0;function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable});keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1,source;i<arguments.length;i++){source=null!=arguments[i]?arguments[i]:{};if(i%2){ownKeys(Object(source),!0).forEach(function(key){babelHelpers.defineProperty(target,key,source[key])})}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source))}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}}return target}/**
 * `rich-text-editor-image`
 * an inline image button for rich text editor
 *
 * @element rich-text-editor-image
 * @demo ./demo/buttons.html
 */var RichTextEditorImage=/*#__PURE__*/function(_RichTextEditorPrompt){babelHelpers.inherits(RichTextEditorImage,_RichTextEditorPrompt);babelHelpers.createClass(RichTextEditorImage,[{key:"render",// render function for template
value:function render(){return babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorImage.prototype),"render",this).call(this)}// properties available to the custom element for data binding
}],[{key:"tag",/**
   * Store the tag name to make it easier to obtain directly.
   */get:function get(){return"rich-text-editor-image"}},{key:"properties",get:function get(){return _objectSpread({},babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorImage),"properties",this))}}]);function RichTextEditorImage(){var _this;babelHelpers.classCallCheck(this,RichTextEditorImage);_this=babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(RichTextEditorImage).call(this));_this.fields=[{property:"src",title:"Image URL",description:"The image URL. (Leave blank to remove.)",inputMethod:"textfield"},{property:"alt",title:"Alt Text",inputMethod:"textfield"},{property:"width",title:"Width",inputMethod:"textfield",inline:!0},{property:"height",title:"Height",inputMethod:"textfield",inline:!0}];_this.command="insertHTML";_this.label="Insert Inline Image";_this.icon="editor:insert-photo";_this.tag="img";_this.value={};return _this}/**
   * overrides default block selectors
   *
   * @readonly
   * @memberof RichTextEditorLink
   */babelHelpers.createClass(RichTextEditorImage,[{key:"getValue",/**
   * updates prompt fields with selected range data
   */value:function getValue(){var img=this.rangeQuery();return!img?void 0:{alt:img.getAttribute("alt"),src:img.getAttribute("src"),width:img.getAttribute("width"),height:img.getAttribute("height")}}},{key:"setToggled",value:function setToggled(){this.toggled=!!this.value}},{key:"blockSelectors",get:function get(){return"img"}/**
   * whether button is toggled
   *
   * @readonly
   * @memberof RichTextEditorButton
   */},{key:"isToggled",get:function get(){return this.toggled}/**
   * determaines commandVal based on values passed from prompt
   */},{key:"promptCommandVal",get:function get(){var alt=this.getPropValue("alt"),src=this.getPropValue("src"),width=this.getPropValue("width"),height=this.getPropValue("height");return!src?"":"<img src=\"".concat(src,"\"").concat(!alt?"":" alt=\"".concat(alt,"\"")).concat(!width?"":" width=\"".concat(width,"\"")).concat(!height?"":" width=\"".concat(height,"\""),">")}}]);return RichTextEditorImage}((0,_richTextEditorPromptButton.RichTextEditorPromptButtonBehaviors)(_litElement.LitElement));_exports.RichTextEditorImage=RichTextEditorImage;window.customElements.define(RichTextEditorImage.tag,RichTextEditorImage)});