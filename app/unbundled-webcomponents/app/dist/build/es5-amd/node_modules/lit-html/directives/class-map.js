define(["exports","../lit-html.js"],function(_exports,_litHtml){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.classMap=void 0;/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */ // IE11 doesn't support classList on SVG elements, so we emulate it with a Set
var ClassList=/*#__PURE__*/function(){function ClassList(element){babelHelpers.classCallCheck(this,ClassList);this.classes=new Set;this.changed=!1;this.element=element;var classList=(element.getAttribute("class")||"").split(/\s+/),_iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _iterator=classList[Symbol.iterator](),_step,cls;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){cls=_step.value;this.classes.add(cls)}}catch(err){_didIteratorError=!0;_iteratorError=err}finally{try{if(!_iteratorNormalCompletion&&null!=_iterator.return){_iterator.return()}}finally{if(_didIteratorError){throw _iteratorError}}}}babelHelpers.createClass(ClassList,[{key:"add",value:function add(cls){this.classes.add(cls);this.changed=!0}},{key:"remove",value:function remove(cls){this.classes.delete(cls);this.changed=!0}},{key:"commit",value:function commit(){if(this.changed){var classString="";this.classes.forEach(function(cls){return classString+=cls+" "});this.element.setAttribute("class",classString)}}}]);return ClassList}(),previousClassesCache=new WeakMap,classMap=(0,_litHtml.directive)(function(classInfo){return function(part){if(!babelHelpers.instanceof(part,_litHtml.AttributePart)||babelHelpers.instanceof(part,_litHtml.PropertyPart)||"class"!==part.committer.name||1<part.committer.parts.length){throw new Error("The `classMap` directive must be used in the `class` attribute "+"and must be the only part in the attribute.")}var committer=part.committer,element=committer.element,previousClasses=previousClassesCache.get(part);if(previousClasses===void 0){// Write static classes once
// Use setAttribute() because className isn't a string on SVG elements
element.setAttribute("class",committer.strings.join(" "));previousClassesCache.set(part,previousClasses=new Set)}var classList=element.classList||new ClassList(element);// Remove old classes that no longer apply
// We use forEach() instead of for-of so that re don't require down-level
// iteration.
previousClasses.forEach(function(name){if(!(name in classInfo)){classList.remove(name);previousClasses.delete(name)}});// Add or remove classes based on their classMap value
for(var name in classInfo){var value=classInfo[name];if(value!=previousClasses.has(name)){// We explicitly want a loose truthy check of `value` because it seems
// more convenient that '' and 0 are skipped.
if(value){classList.add(name);previousClasses.add(name)}else{classList.remove(name);previousClasses.delete(name)}}}if("function"===typeof classList.commit){classList.commit()}}});/**
 * Stores the ClassInfo object applied to a given AttributePart.
 * Used to unset existing values when a new ClassInfo object is applied.
 */_exports.classMap=classMap});