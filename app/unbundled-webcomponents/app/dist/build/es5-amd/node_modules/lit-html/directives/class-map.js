define(["exports","../lit-html.js"],function(_exports,_litHtml){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.classMap=void 0;function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"===typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"===typeof o.length){if(it)o=it;var i=0,F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:!0};return{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var normalCompletion=!0,didErr=!1,err;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();normalCompletion=step.done;return step},e:function e(_e2){didErr=!0;err=_e2},f:function f(){try{if(!normalCompletion&&null!=it.return)it.return()}finally{if(didErr)throw err}}}}function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"===typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if("Object"===n&&o.constructor)n=o.constructor.name;if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}function _arrayLikeToArray(arr,len){if(null==len||len>arr.length)len=arr.length;for(var i=0,arr2=Array(len);i<len;i++){arr2[i]=arr[i]}return arr2}// IE11 doesn't support classList on SVG elements, so we emulate it with a Set
var ClassList=/*#__PURE__*/function(){function ClassList(element){babelHelpers.classCallCheck(this,ClassList);this.classes=new Set;this.changed=!1;this.element=element;var classList=(element.getAttribute("class")||"").split(/\s+/),_iterator=_createForOfIteratorHelper(classList),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var cls=_step.value;this.classes.add(cls)}}catch(err){_iterator.e(err)}finally{_iterator.f()}}babelHelpers.createClass(ClassList,[{key:"add",value:function add(cls){this.classes.add(cls);this.changed=!0}},{key:"remove",value:function remove(cls){this.classes.delete(cls);this.changed=!0}},{key:"commit",value:function commit(){if(this.changed){var classString="";this.classes.forEach(function(cls){return classString+=cls+" "});this.element.setAttribute("class",classString)}}}]);return ClassList}(),previousClassesCache=new WeakMap,classMap=(0,_litHtml.directive)(function(classInfo){return function(part){if(!babelHelpers.instanceof(part,_litHtml.AttributePart)||babelHelpers.instanceof(part,_litHtml.PropertyPart)||"class"!==part.committer.name||1<part.committer.parts.length){throw new Error("The `classMap` directive must be used in the `class` attribute "+"and must be the only part in the attribute.")}var committer=part.committer,element=committer.element,previousClasses=previousClassesCache.get(part);if(previousClasses===void 0){// Write static classes once
// Use setAttribute() because className isn't a string on SVG elements
element.setAttribute("class",committer.strings.join(" "));previousClassesCache.set(part,previousClasses=new Set)}var classList=element.classList||new ClassList(element);// Remove old classes that no longer apply
// We use forEach() instead of for-of so that re don't require down-level
// iteration.
previousClasses.forEach(function(name){if(!(name in classInfo)){classList.remove(name);previousClasses.delete(name)}});// Add or remove classes based on their classMap value
for(var name in classInfo){var value=classInfo[name];if(value!=previousClasses.has(name)){// We explicitly want a loose truthy check of `value` because it seems
// more convenient that '' and 0 are skipped.
if(value){classList.add(name);previousClasses.add(name)}else{classList.remove(name);previousClasses.delete(name)}}}if("function"===typeof classList.commit){classList.commit()}}});/**
 * Stores the ClassInfo object applied to a given AttributePart.
 * Used to unset existing values when a new ClassInfo object is applied.
 */_exports.classMap=classMap});